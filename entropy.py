import numpy as np
import streamlit as st
import plotly.graph_objects as go
from math import pi
from scipy.integrate import quad

# ===============================
# Configura√ß√µes iniciais & constantes
# ===============================
k = 1.380649e-23  # Constante de Boltzmann (J/K)

def boltzmann_energy_dist(E, T):
    """
    Distribui√ß√£o de energia (densidade por unidade de energia) para 3 graus de liberdade translacionais:
    f(E) = (2 / sqrt(pi)) * (1 / (k T)^(3/2)) * sqrt(E) * exp(-E/(k T))
    (unidades: 1/J)
    """
    with np.errstate(all="ignore"):
        coeff = (2.0 / np.sqrt(pi)) * (1.0 / (k * T) ** 1.5)
        return coeff * np.sqrt(E) * np.exp(-E / (k * T))


def maxwell_boltzmann_speed_dist(v, T, m):
    """
    Distribui√ß√£o de velocidades (densidade por v) em 3D:
    f(v) = 4œÄ (m / (2œÄ k T))^(3/2) v^2 exp(- m v^2 / (2 k T))
    (unidades: 1/(m/s))
    """
    with np.errstate(all="ignore"):
        pref = 4.0 * pi * (m / (2.0 * pi * k * T)) ** 1.5
        return pref * v ** 2 * np.exp(-m * v ** 2 / (2.0 * k * T))


def stefan_boltzmann_power(T, A=1.0, emissivity=1.0):
    sigma = 5.670374419e-8
    return emissivity * sigma * A * T ** 4


def energia_total_radiada_numeric(T1, T2, A=1.0, emissivity=1.0):
    integrand = lambda T: emissivity * 5.670374419e-8 * A * T ** 4
    energia, _ = quad(integrand, T1, T2)
    return energia


def main():
    st.set_page_config(layout="wide", page_title="Deriva√ß√£o Interativa ‚Äî Boltzmann")

    # CSS responsivo m√≠nimo
    st.markdown(
        """
        <style>
        @media (max-width: 768px) {
            .element-container:has(.stPlotlyChart) { padding-left: 0px !important; padding-right: 0px !important; }
            .stSlider > div { padding: 0px 4px !important; }
        }
        .block-container { padding-top: 1rem; padding-bottom: 1rem; }
        .stExpander > .stMarkdown { font-size: 14px; }
        </style>
        """,
        unsafe_allow_html=True,
    )

    # ---------------------------
    # Sidebar: par√¢metros e op√ß√µes
    # ---------------------------
    with st.sidebar:
        st.title("Par√¢metros")
        T_global = st.slider("Temperatura (K) - controle global", 50, 1500, 300, step=10)
        st.markdown("**Massa molecular por part√≠cula** (em u = amu)")
        mass_u = st.number_input("Massa (u)", value=28.0, step=1.0, format="%.4f")
        u_to_kg = 1.66053906660e-27
        m = mass_u * u_to_kg
        st.markdown(f"Massa por part√≠cula (kg): **{m:.3e}**")
        st.markdown("---")
        st.title("Op√ß√µes de Visualiza√ß√£o")
        show_v2 = st.checkbox("Mostrar efeito do fator geom√©trico v¬≤ (comparar)", value=True)
        show_lagrange = st.checkbox("Mostrar esbo√ßo do m√©todo de Lagrange", value=True)
        show_normal_const = st.checkbox("Mostrar constantes anal√≠ticas de normaliza√ß√£o", value=True)
        st.markdown("---")
        st.markdown("Dica: os sliders nas p√°ginas individuais tamb√©m mudam os gr√°ficos localmente.")

    # ---------------------------
    # Walkthrough interativo (passos)
    # ---------------------------
    st.title("üî¨ Ludwig Boltzmann ‚Äî Dedu√ß√£o interativa (come√ßando de PV = nRT)")
    st.markdown(
        "Escolha um passo abaixo para ver o racioc√≠nio hist√≥rico-matem√°tico, as ferramentas usadas e a demonstra√ß√£o num√©rica."
    )

    steps = [
        "1. PV = nRT ‚Üí Energia por mol√©cula",
        "2. Teoria cin√©tica: P ‚Üî energia cin√©tica m√©dia",
        "3. Pergunta: como se distribui a energia?",
        "4. Contagem de microestados ‚Üí Entropia S = k ln Œ©",
        "5. M√©todo dos multiplicadores de Lagrange (esbo√ßo)",
        "6. Resultados: fator de Boltzmann e interpreta√ß√£o",
        "7. Jacobiano / densidade de estados (v¬≤)",
        "8. Normaliza√ß√£o (integrais gaussianas e fun√ß√£o gama)",
        "9. Experimento num√©rico: comparar candidatos",
    ]

    step = st.selectbox("Selecione o passo:", steps, index=0)

    if step == steps[0]:
        st.header("1 ‚Äî PV = nRT ‚Üí Energia por mol√©cula")
        st.write("Partimos da lei dos gases ideais:")
        st.latex(r"PV = nRT.")
        st.write(r"Com \(n = N/N_A\) e \(R = k N_A\) obtemos:")
        st.latex(r"PV = N k T.")
        st.write(r"Dividindo por \(N\):")
        st.latex(r"\frac{P V}{N} = k T.")
        st.write("Interpreta√ß√£o: \(kT\) tem dimens√£o de energia ‚Äî liga temperatura √† energia m√©dia por part√≠cula.")
        st.info("Ferramenta: √°lgebra b√°sica e interpreta√ß√£o dimensional ‚Äî conecta grandezas macrosc√≥picas com energia microsc√≥pica.")

    elif step == steps[1]:
        st.header("2 ‚Äî Teoria cin√©tica: press√£o e energia cin√©tica m√©dia")
        st.latex(r"P = \frac{1}{3} \frac{N m \langle v^2 \rangle}{V}.")
        st.write("Comparando com \(P = \frac{N k T}{V}\) resulta:")
        st.latex(r"\frac{1}{2} m \langle v^2 \rangle = \frac{3}{2} k T.")
        st.write("Ou seja, a energia cin√©tica m√©dia por part√≠cula √© \(\\tfrac{3}{2}kT\).")
        st.info("Ferramenta: esperan√ßa matem√°tica (m√©dia) e manipula√ß√£o alg√©brica para ligar temperatura a energia cin√©tica.")

    elif step == steps[2]:
        st.header("3 ‚Äî A pergunta central")
        st.write("Se conhecemos a m√©dia \(\\langle E\\rangle = \\tfrac{3}{2} kT\), como as energias individuais se distribuem?")
        st.write("Precisamos de uma **fun√ß√£o de densidade de probabilidade** \(f(v)\) ou \(f(E)\) que descreva essa dispers√£o.")
        st.info("Ferramenta: formula√ß√£o probabil√≠stica ‚Äî passamos do determin√≠stico para o estat√≠stico.")

    elif step == steps[3]:
        st.header("4 ‚Äî Contagem de microestados e entropia")
        st.latex(r"S = k \ln \Omega.")
        st.write("Procuramos a distribui√ß√£o \(f\) que maximize \(\Omega\) (ou \(S\)) sob restri√ß√µes (normaliza√ß√£o e energia m√©dia fixa).")
        st.info("Ferramenta: combinat√≥ria e logaritmos ‚Äî simplificam a maximiza√ß√£o.")

    elif step == steps[4]:
        st.header("5 ‚Äî M√©todo dos multiplicadores de Lagrange (esbo√ßo)")
        st.write("Queremos maximizar \(S[f]\) sujeito a:")
        st.latex(r"\int f(\mathbf{v})\, d^3v = 1")
        st.latex(r"\int \tfrac{1}{2} m v^2 f(\mathbf{v})\, d^3v = \tfrac{3}{2}kT")
        st.write("Definimos o funcional:")
        st.latex(r"\mathcal{L}[f] = \ln\Omega[f] - \alpha\left(\int f - 1\right) - \beta\left(\int \tfrac{1}{2}mv^2 f - \tfrac{3}{2}kT\right)")
        st.write(r"A condi√ß√£o \(\delta \mathcal{L}/\delta f = 0\) leva a:")
        st.latex(r"f(\mathbf{v}) \propto e^{-\beta \tfrac{1}{2} m v^2}.")
        st.write(r"Identificando \(\beta = 1/(kT)\) obtemos o exponencial de Boltzmann.")
        if show_lagrange:
            st.write("**Por que usar Lagrange?**")
            st.write("- √â a ferramenta sistem√°tica para otimiza√ß√£o com restri√ß√µes; transforma um problema restrito em um sem restri√ß√µes.")
            st.write("- Em linguagem f√≠sica, estamos escolhendo *a distribui√ß√£o mais prov√°vel* (maior n√∫mero de microestados) que satisfa√ßa as condi√ß√µes macroscopicamente observadas.")
        st.info("Ferramenta: c√°lculo variacional e multiplicadores de Lagrange ‚Äî essencial para derivar densidades de probabilidade condicionadas.")

    elif step == steps[5]:
        st.header("6 ‚Äî Do exponencial em v ao fator de Boltzmann em E")
        st.write(r"A solu√ß√£o funcional exponencial depende da energia cin√©tica: \(E=\tfrac{1}{2}m v^2\).")
        st.write("Escrevendo em termos de energia:")
        st.latex(r"f(E) \propto e^{-E/(kT)}.")
        st.write("Esse √© o **fator de Boltzmann**: estados com energia maior t√™m probabilidade exponencialmente menor.")
        st.info("Ferramenta: identifica√ß√£o de constantes (Œ≤‚Üí1/kT) e mudan√ßa de vari√°vel energia‚Üîvelocidade.")

    elif step == steps[6]:
        st.header("7 ‚Äî O Jacobiano e o termo \(v^2\) (densidade de estados)")
        st.write("Quando passamos de \(f(\mathbf{v})\) (densidade no espa√ßo vetorial 3D) para \(f(v)\) (densidade do m√≥dulo da velocidade),")
        st.write("temos de multiplicar pelo elemento de volume em coordenadas esf√©ricas:")
        st.latex(r"d^3v = 4\pi v^2 dv.")
        st.write("Portanto:")
        st.latex(r"f(v)\,dv \propto 4\pi v^2 e^{-m v^2/(2kT)} dv.")
        st.write("O termo \(4\pi v^2\) √© o **Jacobiano** (mudan√ßa de vari√°vel) ‚Äî representa a densidade de estados geom√©trica.")
        if show_v2:
            st.info("Ferramenta: c√°lculo multivariado ‚Äî mudan√ßa de vari√°veis e interpreta√ß√£o geom√©trica (mais microestados a velocidades maiores).")

    elif step == steps[7]:
        st.header("8 ‚Äî Normaliza√ß√£o (integrais gaussianas e fun√ß√£o gama)")
        st.write("Para que \(f(v)\) seja probabilidade v√°lida, impomos:")
        st.latex(r"\int_0^\infty f(v) dv = 1.")
        st.write("Isso define a constante:")
        st.latex(r"A = 4\pi \left(\frac{m}{2\pi k T}\right)^{3/2}.")
        st.write("A normaliza√ß√£o envolve integrais do tipo \(\int_0^\infty v^2 e^{-a v^2} dv\) que se resolvem com transforma√ß√µes que levam √† fun√ß√£o gama.")
        if show_normal_const:
            st.write("Rela√ß√£o √∫til (para refer√™ncia):")
            st.latex(r"\int_0^\infty x^{n} e^{-a x^2} dx = \frac{1}{2} a^{-(n+1)/2} \Gamma\!\left(\frac{n+1}{2}\right).")
            st.write("Usando isso com \(n=2\) recuperamos a forma do prefator anal√≠tico.")
        st.info("Ferramenta: t√©cnicas de integra√ß√£o (gaussiana) e conhecimento de fun√ß√µes especiais (Œì).")

    elif step == steps[8]:
        st.header("9 ‚Äî Experimento num√©rico: comparar candidatos")
        st.write("Constru√≠mos candidatos simples e verificamos se cumprem normaliza√ß√£o e a restri√ß√£o de energia m√©dia.")
        st.write("- Candidato A: \(e^{-E/(kT)}\)")
        st.write("- Candidato B: \(\sqrt{E}\, e^{-E/(kT)}\)  (simula densidade de estados)")
        st.write("A normaliza√ß√£o e a energia m√©dia mostram por que a forma final combina ambos os fatores.")
        st.info("Ferramenta: integra√ß√£o num√©rica para testar hip√≥teses e validar escolhas anal√≠ticas.")

    # ---------------------------
    # Menu principal com fun√ß√µes de plot
    # ---------------------------
    st.markdown("---")
    st.header("Menu de visualiza√ß√µes")
    options = {
        "Distribui√ß√£o de Boltzmann (energia) ‚Äî gr√°fico + dedu√ß√£o": "boltzmann",
        "Entropia e Temperatura ‚Äî S(E) e T(E)": "entropy",
        "Fra√ß√£o de part√≠culas at√© E‚ÇÄ": "cdf",
        "Pot√™ncia radiada (Stefan-Boltzmann)": "stefan_boltzmann",
    }

    choice = st.selectbox("Escolha a visualiza√ß√£o:", list(options.keys()))

    if options[choice] == "boltzmann":
        st.subheader("Distribui√ß√£o de energia (Boltzmann)")
        T = st.slider("Temperatura (K)", 50, 1500, T_global, step=10)
        E_vals = np.linspace(0, 10 * k * T, 500)
        fE = boltzmann_energy_dist(E_vals, T)
        fig = go.Figure()
        fig.add_trace(
            go.Scatter(x=E_vals / (k * T), y=fE, mode="lines", name=r"$f(E)$")
        )
        fig.update_layout(
            title="Distribui√ß√£o de energia de Boltzmann",
            xaxis_title=r"$E / (kT)$",
            yaxis_title=r"$f(E)$ (densidade por energia)",
        )
        st.plotly_chart(fig, use_container_width=True)

    elif options[choice] == "entropy":
        st.subheader("Entropia e Temperatura (qualitativo)")
        st.latex(r"S = k \ln \Omega")
        st.latex(r"\frac{1}{T} = \frac{\partial S}{\partial E}")
        st.write("Esta visualiza√ß√£o √© conceitual e n√£o mostra c√°lculos num√©ricos precisos.")
        st.info("√â uma demonstra√ß√£o visual da rela√ß√£o entre entropia, energia e temperatura.")

    elif options[choice] == "cdf":
        st.subheader("Fra√ß√£o acumulada de part√≠culas at√© energia E‚ÇÄ")
        T = st.slider("Temperatura (K)", 50, 1500, T_global, step=10, key="cdf_T")
        E0 = st.slider("Energia limite E‚ÇÄ (em kT)", 0.1, 10.0, 3.0, step=0.1)
        integral = quad(
            lambda E: boltzmann_energy_dist(E, T), 0, E0 * k * T
        )[0]
        st.latex(
            r"F(E_0) = \int_0^{E_0} f(E) dE = "
            + f"{integral:.4f}"
        )
        st.write(
            f"A fra√ß√£o acumulada de part√≠culas com energia at√© {E0:.1f} kT √© aproximadamente {integral:.4f}."
        )

    elif options[choice] == "stefan_boltzmann":
        st.subheader("Pot√™ncia radiada (Lei de Stefan-Boltzmann)")
        T1 = st.number_input("Temperatura inicial T1 (K)", value=300.0)
        T2 = st.number_input("Temperatura final T2 (K)", value=1000.0)
        A = st.number_input("√Årea (m¬≤)", value=1.0)
        emissivity = st.slider("Emissividade", 0.0, 1.0, 1.0, 0.01)
        potencia = stefan_boltzmann_power(T2, A, emissivity)
        energia = energia_total_radiada_numeric(T1, T2, A, emissivity)
        st.latex(r"P = \varepsilon \sigma A T^4")
        st.write(f"Pot√™ncia radiada a T2 = {T2} K: {potencia:.3e} W")
        st.write(f"Energia total radiada de {T1} K a {T2} K: {energia:.3e} J")

    # ---------------------------
    # Pequeno laborat√≥rio num√©rico ‚Äî compara√ß√£o candidatos
    # ---------------------------
    st.markdown("---")
    st.header("Mini-laborat√≥rio: compara√ß√£o de fun√ß√µes candidatas")

    T_lab = st.slider("Temperatura para o mini-lab (K)", 50, 1500, 300, step=10, key="lab_T")
    E_vals_lab = np.linspace(0, 10 * k * T_lab, 500)

    fA = np.exp(-E_vals_lab / (k * T_lab))
    fB = np.sqrt(E_vals_lab) * np.exp(-E_vals_lab / (k * T_lab))

    # Normalizar
    normA = np.trapz(fA, E_vals_lab)
    normB = np.trapz(fB, E_vals_lab)
    fA_norm = fA / normA
    fB_norm = fB / normB

    # M√©dias
    meanA = np.trapz(E_vals_lab * fA_norm, E_vals_lab)
    meanB = np.trapz(E_vals_lab * fB_norm, E_vals_lab)

    st.write("Distribui√ß√£o A: \(f_A(E) \propto e^{-E/(kT)}\)")
    st.write(f"Integral (normaliza√ß√£o) = {normA:.4f}")
    st.write(f"Energia m√©dia calculada = {meanA / k:.4f} kT (esperado: 3/2)")

    st.write("Distribui√ß√£o B: \(f_B(E) \propto \sqrt{E} e^{-E/(kT)}\)")
    st.write(f"Integral (normaliza√ß√£o) = {normB:.4f}")
    st.write(f"Energia m√©dia calculada = {meanB / k:.4f} kT (esperado: 3/2)")

    fig_lab = go.Figure()
    fig_lab.add_trace(go.Scatter(x=E_vals_lab / (k * T_lab), y=fA_norm, mode="lines", name=r"$f_A(E)$"))
    fig_lab.add_trace(go.Scatter(x=E_vals_lab / (k * T_lab), y=fB_norm, mode="lines", name=r"$f_B(E)$"))
    fig_lab.update_layout(
        title="Compara√ß√£o das fun√ß√µes candidatas (normalizadas)",
        xaxis_title=r"$E / (kT)$",
        yaxis_title="f(E) normalizado",
    )
    st.plotly_chart(fig_lab, use_container_width=True)

    # Dedu√ß√µes matem√°ticas detalhadas
    st.markdown("---")
    st.header("Dedu√ß√µes matem√°ticas ‚Äî passo a passo")

    st.latex(r"""
    f_v(v) = 4\pi\left(\frac{m}{2\pi k T}\right)^{3/2} v^2 e^{- \frac{m v^2}{2 k T}}
    """)

    st.write(r"Usando \(E=\tfrac{1}{2} m v^2\) e a mudan√ßa de vari√°vel \(dv = dE / (m v)\), substituindo \(v = \sqrt{2E/m}\) obtemos:")

    st.latex(r"""
    f_E(E) \propto \sqrt{E}\, e^{-E/(kT)}.
    """)

    st.write("A normaliza√ß√£o anal√≠tica leva ao fator:")

    st.latex(r"""
    f_E(E) = \frac{2}{\sqrt{\pi}} \frac{1}{(kT)^{3/2}} \sqrt{E}\, e^{-E/(kT)}.
    """)

    st.write(r"Energia mais prov√°vel e m√©dia (deriva√ß√µes mostradas anteriormente):")

    st.latex(r"""
    E_{mp} = \tfrac{1}{2}kT \\
    \langle E \rangle = \tfrac{3}{2}kT
    """)

    st.write("Ferramentas matem√°ticas usadas e porqu√™:")
    st.write("- √Ålgebra e manipula√ß√£o de constantes: para ligar \(PV=nRT\) a energia por part√≠cula.")
    st.write("- C√°lculo variacional (Lagrange): para derivar a forma exponencial como a distribui√ß√£o mais prov√°vel.")
    st.write("- Mudan√ßa de vari√°veis e Jacobiano: para transformar de \(f(\mathbf v)\) para \(f(E)\) e contar estados.")
    st.write("- Integra√ß√£o (gaussiana/fun√ß√£o gama): para normalizar e calcular m√©dias.")

if __name__ == "__main__":
    main()
